"""
Aplicaci√≥n principal FastAPI.

Este m√≥dulo contiene la configuraci√≥n y creaci√≥n de la aplicaci√≥n FastAPI,
incluyendo middleware, manejo de errores, eventos de lifecycle y endpoints b√°sicos.
"""

from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from contextlib import asynccontextmanager
from loguru import logger

from app.config import settings
from app.database import create_db_and_tables
from app.api import api_router
from app.middleware import LoggingMiddleware
from app.logging_config import setup_logging, log_business_event, log_error


@asynccontextmanager
async def lifespan(app: FastAPI):
    """
    Eventos de inicio y cierre de la aplicaci√≥n.
    
    Maneja la inicializaci√≥n y limpieza de recursos cuando
    la aplicaci√≥n inicia y se detiene.
    
    Args:
        app: Instancia de la aplicaci√≥n FastAPI
        
    Note:
        - Crea tablas de base de datos al inicio
        - Registra eventos de startup/shutdown
        - Se ejecuta una vez por ciclo de vida de la aplicaci√≥n
    """
    # Startup
    setup_logging()  # ‚Üê AGREGAR ESTA L√çNEA
    logger.info("üöÄ Starting FastAPI application...")
    create_db_and_tables()
    log_business_event("application_startup", {"version": settings.app_version})
    logger.info("‚úÖ Application startup complete")
    
    yield
    
    # Shutdown
    logger.info("üõë Shutting down FastAPI application...")
    log_business_event("application_shutdown")
    logger.info("‚úÖ Application shutdown complete")


def create_application() -> FastAPI:
    """
    Factory para crear la aplicaci√≥n FastAPI.
    
    Configura todos los aspectos de la aplicaci√≥n incluyendo:
    - Middleware (CORS, Logging)
    - Rutas y endpoints
    - Manejo de errores
    - Documentaci√≥n autom√°tica
    
    Returns:
        FastAPI: Instancia configurada de la aplicaci√≥n
        
    Note:
        - La documentaci√≥n se habilita solo en modo debug
        - CORS se configura seg√∫n las variables de entorno
        - Todos los errores se registran autom√°ticamente
    """
    
    app = FastAPI(
        title=settings.app_name,
        version=settings.app_version,
        debug=settings.debug,
        lifespan=lifespan,
        docs_url="/docs" if settings.debug else None,
        redoc_url="/redoc" if settings.debug else None,
    )

    # CORS middleware
    app.add_middleware(
        CORSMiddleware,
        allow_origins=settings.allowed_origins,
        allow_credentials=True,
        allow_methods=["*"],
        allow_headers=["*"],
    )
    
    # Logging middleware
    app.add_middleware(LoggingMiddleware)

    # Include routers
    app.include_router(api_router, prefix="/api/v1")

    # Exception handlers
    @app.exception_handler(HTTPException)
    async def http_exception_handler(request, exc):
        """
        Manejo de excepciones HTTP.
        
        Intercepta todas las HTTPException y las registra
        antes de devolver la respuesta al cliente.
        """
        log_error(exc, {"url": str(request.url), "method": request.method})
        return JSONResponse(
            status_code=exc.status_code,
            content={"detail": exc.detail}
        )

    @app.exception_handler(Exception)
    async def general_exception_handler(request, exc):
        """
        Manejo de excepciones generales no controladas.
        
        Captura cualquier excepci√≥n no manejada, la registra
        y devuelve un error 500 gen√©rico al cliente.
        
        Note:
            - Evita que errores internos se expongan al cliente
            - Registra el error completo para debugging
        """
        log_error(exc, {"url": str(request.url), "method": request.method})
        logger.error(f"Unhandled exception: {str(exc)}")
        return JSONResponse(
            status_code=500,
            content={"detail": "Internal server error"}
        )

    return app


# Instancia global de la aplicaci√≥n
app = create_application()


@app.get("/")
async def root():
    """
    Endpoint ra√≠z de la aplicaci√≥n.
    
    Returns:
        dict: Mensaje de bienvenida con nombre y versi√≥n de la aplicaci√≥n
        
    Note:
        - Endpoint p√∫blico accesible sin autenticaci√≥n
        - √ötil para verificar que la aplicaci√≥n est√° corriendo
    """
    logger.info("Root endpoint accessed")
    return {"message": f"Welcome to {settings.app_name} v{settings.app_version}"}


@app.get("/health")
async def health_check():
    """
    Health check endpoint para monitoreo.
    
    Returns:
        dict: Estado de la aplicaci√≥n y versi√≥n
        
    Note:
        - Endpoint p√∫blico para health checks
        - √ötil para load balancers y herramientas de monitoreo
        - Retorna 200 OK si la aplicaci√≥n est√° funcionando
    """
    logger.debug("Health check performed")
    return {"status": "healthy", "version": settings.app_version}
